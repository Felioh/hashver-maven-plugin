/*
    Copyright 2020 Anton Vodonosov (avodonosov@yandex.ru).

    This file is part of hashver-maven-plugin.

    hashver-maven-plugin is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    hashver-maven-plugin is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with hashver-maven-plugin.  If not, see <https://www.gnu.org/licenses/>.
*/

package pro.avodonosov.mvnhashver;


import org.apache.maven.plugin.testing.MojoRule;
import org.apache.maven.plugin.testing.WithoutMojo;

import org.junit.Ignore;
import org.junit.Rule;
import static org.junit.Assert.*;
import org.junit.Test;

import java.io.File;

// This class was generated by the
//     mvn archetype:generate -DarchetypeArtifactId=maven-archetype-plugin
//
// I don't have any tests yet, but want to keep the class
// for now, in case I'll need tests.
//
// Otherwise - delete it with time.
//
// Test ideas for the hasver-maven-plugin:
// - Moving project to another directory doesn't change hashes
// - Moving project ot different OS (different file.separator)
//   doesn't change hashes
// - Generation of hasversions is idempotent - when new hashversions
//   are specified via system properties, hashversions do not change.
//   This means the dependency tree we use for hashing does not include
//   the properties specified, only actual hashes of the module sources.
// - propFileToSysIfExists prints a log in all control branches
// - Directory structure modifications which preserve traversal order
//   affect the hash. (In other words, we hash file and directory pathes,
//   not simple names). In the example below, when the "file" is taken
//   out of the "dir" hashing by short names would not change the hash,
//   as the short names and the order of their hashing is not changed.
//
//           src/
//             dir/
//               file
//
//           src/
//             dir/
//             file
//
@Ignore
public class MyMojoTest
{
    @Rule
    public MojoRule rule = new MojoRule()
    {
        @Override
        protected void before() throws Throwable 
        {
        }

        @Override
        protected void after()
        {
        }
    };

    /**
     * @throws Exception if any
     */
    @Test
    public void testSomething()
            throws Exception
    {
        File pom = new File( "target/test-classes/project-to-test/" );
        assertNotNull( pom );
        assertTrue( pom.exists() );

        MyMojo myMojo = ( MyMojo ) rule.lookupConfiguredMojo( pom, "touch" );
        assertNotNull( myMojo );
        myMojo.execute();

        File outputDirectory = ( File ) rule.getVariableValueFromObject( myMojo, "outputDirectory" );
        assertNotNull( outputDirectory );
        assertTrue( outputDirectory.exists() );

        File touch = new File( outputDirectory, "touch.txt" );
        assertTrue( touch.exists() );

    }

    /** Do not need the MojoRule. */
    @WithoutMojo
    @Test
    public void testSomethingWhichDoesNotNeedTheMojoAndProbablyShouldBeExtractedIntoANewClassOfItsOwn()
    {
        assertTrue( true );
    }

}

